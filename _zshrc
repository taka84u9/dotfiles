#!/usr/bin/env zsh
# users generic .zshrc file for zsh(1)

## Environment variable configuration 

export LC_ALL=ja_JP.UTF-8
export LANG=ja_JP.UTF-8

export LESSCHARSET=utf-8
export OUTPUT_CHARSET=utf-8

export PATH=$HOME/bin:$PATH

## Alias configuration
#
# expand aliases before completing
#
setopt complete_aliases   # aliased ls needs if file/dir completions work


## Backspace key
#
bindkey "^?" backward-delete-char


## Prompt configuration
#
autoload -U colors; colors  # use colors

#
# Color
#
DEFAULT=$'%{\e[1;0m%}'
RESET="%{${reset_color}%}"
GREEN="%{${fg[green]}%}"
BLUE="%{${fg[blue]}%}"
RED="%{${fg[red]}%}"
CYAN="%{${fg[cyan]}%}"
YELLOW="%{${fg[yellow]}%}"
WHITE="%{${fg[white]}%}"
GRAY="%{${fg[GRAY]}%}"

RPROMPT="%T"
setopt transient_rprompt
precmd () {
    PROMPT="${GREEN}%n${RESET}@${BLUE}%m${YELLOW} %~${RESET}" 
    st=`git status 2>/dev/null`
    if [[ -n `echo "$st" | grep "^nothing to"` ]]
    then
        color=${fg[cyan]}
    elif [[ -n `echo "$st" | grep "^nothing added"` ]]
    then
        color=${fg[blue]}
    elif [[ -n `echo "$st" | grep "^# Untracked"` ]]
    then
        color=${fg_bold[red]}
    else
        color=${fg[red]}
    fi
    PROMPT+="
%{$color%}$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /')%b${RESET}"
}

# No beep
#
setopt nobeep

# Use escape sequences
#
setopt prompt_subst

# Ignore commands following # in cui
#
setopt interactive_comments

# Disable C-s and C-q
#
setopt no_flow_control

# Enable Japanese file name
#
setopt print_eight_bit

# C-w deletes the caractor next to the /
#
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# Show direcotry in water color
#
export LS_COLORS='di=01;36'

#----------------------------------------------------------
# Complement
#----------------------------------------------------------
# Use full complement functionality
#
autoload -Uz compinit
compinit

# Automatically escape URL string
#
autoload -Uz url-quote-magic; zle -N self-insert url-quote-magic

# Toggle complement candidates using TAB
#
setopt auto_menu

# Show all candidates
#
setopt auto_list

# Can use Emacs style keybind to select candidates
#
zstyle ':completion:*:default' menu select=1

# Even option args are complemented
#
setopt magic_equal_subst

# Insert / after a complemented directory name
#
setopt auto_param_slash

# Colorize
#
#eval `dircolors`
export ZLS_COLORS=$LS_COLORS
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Use compackt style candidates viewer mode
#
setopt list_packed

# Show kinds of file using marks
#
setopt list_types

# Don't automatically remove / on the tail
#
setopt noautoremoveslash

# Do spell check
#
setopt correct

# Complement process name with kill command
#
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'

zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin/bin

#----------------------------------------------------------
# Move
#----------------------------------------------------------
# Change direcroty with it's name
#
setopt auto_cd
# Execute pushd command when current directory is changed by cd command
#
setopt auto_pushd
setopt pushd_ignore_dups

#----------------------------------------------------------
# 履歴関連
#----------------------------------------------------------
# 履歴の保存先
HISTFILE=$HOME/.zsh-history
# メモリに展開する履歴の数
HISTSIZE=10000
# 保存する履歴の数
SAVEHIST=10000
# ヒストリ全体でのコマンドの重複を禁止する
setopt hist_ignore_dups
# コマンドの空白をけずる
setopt hist_reduce_blanks
# historyコマンドはログに記述しない
setopt hist_no_store
# 先頭が空白だった場合はログに残さない
setopt hist_ignore_space
# 履歴ファイルに時刻を記録
setopt extended_history
# シェルのプロセスごとに履歴を共有
setopt share_history
# 複数のzshを同時に使うときなどhistoryファイルに上書きせず追加
setopt append_history
# 履歴をインクリメンタルに追加
setopt inc_append_history
# ヒストリを呼び出してから実行する間に一旦編集可能
setopt hist_verify
# 履歴検索機能のショートカット設定
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
# インクリメンタルサーチの設定
bindkey "^R" history-incremental-search-backward
bindkey "^S" history-incremental-search-forward
# 全履歴の一覧を出力する
history-all () {
    history -E 1
}

#----------------------------------------------------------
# その他
#----------------------------------------------------------
# ログアウト時にバックグラウンドジョブをkillしない
setopt no_hup
# ログアウト時にバックグラウンドジョブを確認しない
setopt no_checkjobs
# バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt notify

# makeのエラー出力に色付け
e_normal=`echo -e "\033[0;30m"`
e_RED=`echo -e "\033[1;31m"`
e_BLUE=`echo -e "\033[1;36m"`
make () {
    LANG=C command make "$@" 2>&1 | sed -e "s@[Ee]rror:.*@$e_RED&$e_normal@g" -e "s@cannot\sfind.*@$e_RED&$e_normal@g" -e "s@[Ww]arning:.*@$e_BLUE&$e_normal@g"
}

export DOTFILES="${HOME}/code/dotfiles"

# source-highlight による less の色付け
if [ -x "${HOME}/.source-highlight/src-hilite-lesspipe.sh" ]; then
    export LESS='-R'
    export LESSOPEN="| $HOME/.source-highlight/src-hilite-lesspipe.sh %s"
fi

export GREP_OPTIONS='--color=auto'


## Python
#
[ -s /usr/local/bin/virtualenvwrapper.sh ] && source /usr/local/bin/virtualenvwrapper.sh
export NOSE_REDNOSE=1
export PYTHONPATH=$HOME/.pythonpath:$PYTHONPATH
export PYTHONSTARTUP=$HOME/.pythonrc.py

## Ruby
#
[ -s "${HOME}/.rvm/scripts/rvm" ] && source $HOME/.rvm/scripts/rvm
# refe
[ -s "${HOME}/.refe/refe" ] && export PATH=$PATH:$HOME/.refe

## Node
#
[ -s "${HOME}/.nvm/nvm.sh" ] && source $HOME/.nvm/nvm.sh

## Perl
#
export PERLBREW_ROOT=$HOME/.perl5/perlbrew
[[ -s "${HOME}/.perl5/perlbrew/etc/bashrc" ]] && source $HOME/.perl5/perlbrew/etc/bashrc
export PERL_BADLANG=0

## Java
#
#export LC_ALL=en

## Git
#
#[[ -s "$HOME/.gitignore" ]] && git config --global core.excludesfile $HOME/.gitignore

## alias
#
[ -f ~/.zshrc.alias ] && source ~/.zshrc.alias

## Completion
[ -f ~/.zshrc.comp ] && source ~/.zshrc.comp


## os depending settings
#
case ${OSTYPE} in
darwin*) # Mac OS X
    [ -f ~/.zshrc.osx ] && source ~/.zshrc.osx
    ;;
linux*)
    [ -f ~/.zshrc.linux ] && source ~/.zshrc.linux
    ;;
esac

## local settings
[ -f ~/.zshrc.local ] && source ~/.zshrc.local


# vim: set foldmethod=marker :
