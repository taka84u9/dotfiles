"" Plugins
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
"
" Brief help
" :BundleList       - list configured bundles
" :BundleInstall(!) - install(update) bundles
" :BundleClean(!)   - confirm(or auto-approve) removal of unused bundles
"

"" for Version > 702 only

if v:version > 702
  "" vimproc
  Bundle 'Shougo/vimproc'

  "" vimshell
  Bundle 'Shougo/vimshell'
  autocmd FileType *      nnoremap <silent><buffer> <leader>vs :<C-u>VimShell<CR>
  autocmd FileType python nnoremap <silent><buffer> <leader>vs :<C-u>VimShellInteractive python<CR>
  autocmd FileType ruby   nnoremap <silent><buffer> <leader>vs :<C-u>VimShellInteractive pry<CR>
  autocmd FileType scheme nnoremap <silent><buffer> <leader>vs :<C-u>VimShellInteractive gosh<CR>
  vmap     <silent> <leader>ss :VimShellSendString<CR>
  nnoremap <silent> <leader>ss :<C-u>VimShellSendString<CR>

  "" unite.vim
  Bundle 'Shougo/unite.vim'

  let g:unite_enable_split_vertically = 1
  let g:unite_winwidth = 50
  let g:unite_enable_start_insert = 1
  let g:unite_source_file_mru_ignore_pattern = '.*\/$\|.*Application\ Data.*'
  nnoremap [unite] <Nop>
  nmap     <space>u [unite]
  nnoremap <silent> [unite]u :<C-u>UniteWithBufferDir -horizontal -buffer-name=files file file/new<CR>
  nnoremap <silent> [unite]c :<C-u>UniteWithCurrentDir -horizontal -buffer-name=files buffer file_mru<CR>
  nnoremap <silent> [unite]i :<C-u>Unite -buffer-name=files buffer_tab<CR>
  nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=files bookmark<CR>
  nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
  nnoremap <silent> [unite]l :<C-u>Unite line<CR>
  nnoremap <silent> [unite]t :<C-u>Unite -immediately -horizontal tab:no-current<CR>
  nnoremap <silent> [unite]m :<C-u>Unite -no-empty git_modified<CR>

  nnoremap <silent> <C-g>    :<C-u>Unite vcs_grep/git<CR>
  "nnoremap <silent> <C-h>    :<C-u>Unite -start-insert help<CR>

  autocmd FileType vim    nnoremap <silent><buffer> K :<C-u>Unite -start-insert -default-action=vsplit help<CR>
  autocmd FileType sh     nnoremap <silent><buffer> K :<C-u>Unite -start-insert -default-action=vsplit ref/man<CR>
  autocmd FileType erlang nnoremap <silent><buffer> K :<C-u>Unite -start-insert -default-action=vsplit ref/erlang<CR>
  autocmd FileType ruby   nnoremap <silent><buffer> K :<C-u>Unite -start-insert -default-action=vsplit ref/ri<CR>
  autocmd FileType python nnoremap <silent><buffer> K :<C-u>Unite -start-insert -default-action=vsplit ref/pydoc<CR>
  autocmd FileType perl   nnoremap <silent><buffer> K :<C-u>Unite -start-insert -default-action=vsplit ref/perldoc<CR>

  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()
    " Overwrite settings
    nmap <buffer><ESC>  <Plug>(unite_exit)
    nmap <buffer><C-c>  <Plug>(unite_exit)
    "imap <buffer>jj     <Plug>(unite_insert_leave)
    imap <buffer><C-w>  <Plug>(unite_delete_backward_path)


    " <C-l>: manual neocomplecache completion.
    inoremap <buffer><C-l>  <C-x><C-u><C-p><Down>

    nmap <buffer><expr><C-d>  unite#do_action('delete')
    imap <buffer><expr><C-d>  unite#do_action('delete')
    nmap <buffer><expr><C-b>  unite#do_action('bookmark')
    imap <buffer><expr><C-b>  unite#do_action('bookmark')
    nmap <buffer><expr><C-k>  unite#do_action('above')
    imap <buffer><expr><C-k>  unite#do_action('above')
    nmap <buffer><expr><C-i>  unite#do_action('left')
    imap <buffer><expr><C-i>  unite#do_action('left')
  endfunction

  " Unite Plugins
    "" unite-git_grep
    Bundle 'sgur/unite-git_grep'

    "" unite-git
    Bundle 'taka84u9/unite-git'

    "" unite-outline
    Bundle 'h1mesuke/unite-outline'

    "" unite-help
    Bundle 'tsukkee/unite-help'

  "" vim-ref
  Bundle 'thinca/vim-ref'

  let g:ref_perldoc_complete_head = 1
  let g:ref_open = 'vsplit'

    " vim-ref Plugins
    "" vim-ref-ri
    Bundle 'taka84u9/vim-ref-ri'

  "" neocomplcache
  Bundle 'Shougo/neocomplcache'
  Bundle 'Shougo/neosnippet'
  Bundle 'honza/snipmate-snippets'

  " Use neocomplcache.
  let g:neocomplcache_enable_at_startup = 1
  " Use underbar completion.
  let g:neocomplcache_enable_underbar_completion = 1
  " Set minimum syntax keyword length.
  let g:neocomplcache_min_syntax_length = 3
  let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

  " Use smartcase.
  let g:neocomplcache_enable_smart_case = 1
  " Use camel case completion.
  let g:neocomplcache_enable_camel_case_completion = 1
  " Select with <TAB>
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

  let g:neocomplcache_ctags_arguments_list = {
        \ 'perl' : '-R -h ".pm"'
        \ }

  " Define keyword.
  if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
  endif
  let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

  let g:neocomplcache_snippets_dir = "~/.vim/snippets,~/.vim/bundle/snipmate-snippets/snippets"
  " Define dictionary.
  let g:neocomplcache_dictionary_filetype_lists = {
        \ 'default'    : '',
        \ 'perl'       : $HOME . '/.vim/dict/perl.dict'
        \ }

  " Define keywork.
  if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
  endif
  let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)

  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif

  let g:neosnippet#enable_snipmate_compatibility = 1


  "" Vimfiler
  Bundle 'Shougo/vimfiler'

  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_safe_mode_by_default = 0

  nnoremap <silent><space>e :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -toggle -no-quit<CR>

  "" indent-guides
  Bundle 'nathanaelkane/vim-indent-guides'

  let g:indent_guides_auto_colors = 0 " read help txt
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_color_change_percent = 30
  "let g:indent_guides_guide_size = 1

  "" localrc
  Bundle "thinca/vim-localrc"

  "" syntastic
  Bundle "scrooloose/syntastic"

  let g:syntastic_mode_map = { 'mode': 'passive',
        \ 'active_filetypes': ['ruby', 'javascript', 'python', 'perl'],
        \ 'passive_filetypes': [] }

endif

"" All version

"" vim-fugitive
Bundle 'tpope/vim-fugitive'

"" vim-surround
Bundle 'tpope/vim-surround'
let g:surround_{char2nr("#")} = "{# \r #}"
let g:surround_{char2nr("*")} = "/* \r */"
let g:surround_{char2nr("p")} = "<?php \r ?>"

"" rails.vim
Bundle 'tpope/vim-rails'

"" quick run
Bundle 'thinca/vim-quickrun'

nmap <Leader>r <plug>(quickrun)
let g:quickrun_config = {}
let g:quickrun_config.perl = {'command': 'perl', 'cmdopt': '-MProject::Libs'}

"" EasyMotion
Bundle 'Lokaltog/vim-easymotion'

let g:EasyMotion_leader_key = '<Space>j'

"" Gist.vim
Bundle "mattn/gist-vim"
Bundle "mattn/webapi-vim"

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gitst_open_browser_after_post = 1

"" vim-coffee-script
Bundle "kchmck/vim-coffee-script"

nnoremap <silent> <Space>c :CoffeeCompile watch vert <CR><C-w>h
let coffee_compile_vert = 1

"" vim-powerline
Bundle "Lokaltog/vim-powerline"
"let g:Powerline_symbols = 'fancy'

"" vim-less
Bundle "groenewege/vim-less"

"" vim-perl
Bundle 'petdance/vim-perl'

"" foldCC
Bundle 'LeafCage/foldCC'
set foldtext=FoldCCtext()
hi Folded ctermfg=DarkBlue
hi FoldColumn ctermfg=LightGrey

"" vim-markdown
Bundle 'tpope/vim-markdown'

" zencoding-vim
Bundle 'mattn/zencoding-vim'

" xslate-vim
Bundle "motemen/xslate-vim"

filetype plugin indent on

" vim: set filetype=vim :
